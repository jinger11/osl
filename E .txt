#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define SIZE 5

int buffer[SIZE];
int count = 0; // number of items in buffer

pthread_mutex_t mutex;
sem_t empty;
sem_t full;

void* producer(void* arg) {
    int item = 1;
    for(int i = 0; i < 5; i++) {
        sem_wait(&empty);           // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock the buffer

        buffer[count++] = item++;    // Produce item
        printf("Producer produced item %d\n", buffer[count-1]);

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&full);              // Signal buffer has one more full slot
    }
    return NULL;
}

void* consumer(void* arg) {
    for(int i = 0; i < 5; i++) {
        sem_wait(&full);            // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock the buffer

        int item = buffer[--count]; // Consume item
        printf("Consumer consumed item %d\n", item);

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&empty);              // Signal buffer has one more empty slot
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty, 0, SIZE); // Buffer initially has SIZE empty slots
    sem_init(&full, 0, 0);     // Buffer initially has 0 full slots

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}

