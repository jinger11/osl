#include <stdio.h>

struct Process {
    int id;
    int arrival;
    int burst;
    int remaining;
    int finish;
};

void SJF_Preemptive(struct Process p[], int n) {
    int time = 0, completed = 0, shortest = -1;
    printf("\n--- SJF (Preemptive) ---\n");

    while (completed != n) {
        int min = 9999;
        shortest = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= time && p[i].remaining > 0 && p[i].remaining < min) {
                min = p[i].remaining;
                shortest = i;
            }
        }

        if (shortest == -1) {
            time++;
            continue;
        }

        p[shortest].remaining--;
        time++;

        if (p[shortest].remaining == 0) {
            completed++;
            p[shortest].finish = time;
        }
    }

    printf("\nProcess\tArrival\tBurst\tFinish\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", p[i].id, p[i].arrival, p[i].burst, p[i].finish);
    }
}

void RoundRobin(struct Process p[], int n, int quantum) {
    int time = 0;
    int done;

    printf("\n--- Round Robin ---\n");

    while (1) {
        done = 1;
        for (int i = 0; i < n; i++) {
            if (p[i].remaining > 0 && p[i].arrival <= time) {
                done = 0;
                if (p[i].remaining > quantum) {
                    time += quantum;
                    p[i].remaining -= quantum;
                } else {
                    time += p[i].remaining;
                    p[i].remaining = 0;
                    p[i].finish = time;
                }
            }
        }
        if (done)
            break;
    }

    printf("\nProcess\tArrival\tBurst\tFinish\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", p[i].id, p[i].arrival, p[i].burst, p[i].finish);
    }
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p1[n], p2[n];

    for (int i = 0; i < n; i++) {
        printf("Enter Arrival and Burst Time for Process %d: ", i + 1);
        scanf("%d%d", &p1[i].arrival, &p1[i].burst);
        p1[i].id = i + 1;
        p1[i].remaining = p1[i].burst;
    }

    for (int i = 0; i < n; i++) {
        p2[i] = p1[i];
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    SJF_Preemptive(p1, n);
    RoundRobin(p2, n, quantum);

    return 0;
}
